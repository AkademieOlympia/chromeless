[["version", 2], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `collection` module provides a simple list-like class and utilities for\nusing it.  A collection is ordered, like an array, but its items are unique,\nlike a set.\n\n"], ["api-json", {"line_number": 8, "name": "Collection", "constructors": [{"line_number": 31, "name": "Collection", "params": [{"line_number": 34, "required": false, "type": "array", "name": "array", "description": "If *array* is given, it will be used as the backing array.  This way the caller\ncan fully control the collection.  Otherwise a new empty array will be used, and\nno one but the collection will have access to it."}], "signature": "Collection(array)", "type": "constructor", "description": "Creates a new collection.  The collection is backed by an array."}], "methods": [{"line_number": 43, "name": "add", "returns": {"line_number": 48, "type": "Collection", "description": "The Collection."}, "params": [{"line_number": 47, "required": true, "type": "object", "name": "itemOrItems", "description": "An item or array of items."}], "signature": "add(itemOrItems)", "type": "method", "description": "Adds a single item or an array of items to the collection.  Any items already\ncontained in the collection are ignored."}, {"line_number": 50, "name": "remove", "returns": {"line_number": 55, "type": "Collection", "description": "The Collection."}, "params": [{"line_number": 54, "required": true, "type": "object", "name": "itemOrItems", "description": "An item or array of items."}], "signature": "remove(itemOrItems)", "type": "method", "description": "Removes a single item or an array of items from the collection.  Any items not\ncontained in the collection are ignored."}], "type": "class", "properties": [{"line_number": 39, "property_type": "number", "type": "property", "name": "length", "description": "The number of items in the collection array."}], "description": "A collection object provides for...in-loop iteration.  Items are yielded in the\norder they were added.  For example, the following code...\n\n    var collection = require(\"collection\");\n    var c = new collection.Collection();\n    c.add(1);\n    c.add(2);\n    c.add(3);\n    for (item in c)\n      console.log(item);\n\n... would print this to the console:\n\n    1\n    2\n    3\n\nIteration proceeds over a copy of the collection made before iteration begins,\nso it is safe to mutate the collection during iteration; doing so does not\naffect the results of the iteration.\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 59, "name": "addCollectionProperty", "params": [{"line_number": 64, "required": true, "type": "object", "name": "object", "description": "The property will be defined on this object."}, {"line_number": 66, "required": true, "type": "string", "name": "propName", "description": "The name of the property."}, {"line_number": 68, "required": false, "type": "array", "name": "backingArray", "description": "If given, this will be used as the collection's backing array."}], "signature": "addCollectionProperty(object, propName, backingArray)", "type": "function", "description": "Adds a collection property to the given object.  Setting the property to a\nscalar value empties the collection and adds the value.  Setting it to an array\nempties the collection and adds all the items in the array."}], ["markdown", "\n\n"]]