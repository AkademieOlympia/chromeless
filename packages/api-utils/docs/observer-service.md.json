[["version", 2], ["markdown", "<!-- contributed by Atul Varma [atul@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `observer-service` module provides access to the\napplication-wide observer service singleton.\n\nFor a list of common observer topics across a variety of Mozilla-based\napplications, see the MDC page on [Observer Notifications].\n\n[Observer Notifications]: https://developer.mozilla.org/en/Observer_Notifications\n\n## Observer Callbacks ##\n\nObserver callbacks are functions of the following form:\n\n    function callback(subject, data) {\n      /* Respond to the event notification here... */\n    }\n\nIn the above example, `subject` is any JavaScript object, as is\n`data`.  The particulars of what the two contain are specific\nto the notification topic.\n\n"], ["api-json", {"line_number": 24, "name": "add", "params": [{"line_number": 29, "required": true, "type": "string", "name": "topic", "description": "The topic to observe.\n"}, {"line_number": 32, "required": true, "type": "function,object", "name": "callback", "description": "Either a function or an object that implements [`nsIObserver`](http://mxr.mozilla.org/mozilla-central/source/xpcom/ds/nsIObserver.idl).\nIf a function, then it is called when the notification occurs.  If an object,\nthen its `observe()` method is called when the notification occurs.\n"}, {"line_number": 37, "required": false, "type": "object", "name": "thisObject", "description": "An optional object to use as `this` when a function callback is called."}], "signature": "add(topic, callback, thisObject)", "type": "function", "description": "Adds an observer callback to be triggered whenever a notification matching the\ntopic is broadcast throughout the application.\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 41, "name": "remove", "params": [{"line_number": 46, "required": true, "type": "string", "name": "topic", "description": "The topic being observed by the previous call to `add()`.\n"}, {"line_number": 49, "required": true, "type": "function,object", "name": "callback", "description": "The callback subscribed in the previous call to `add()`, either a function or\nobject.\n"}, {"line_number": 53, "required": false, "type": "object", "name": "thisObject", "description": "If `thisObject` was passed to the previous call to `add()`, it should be\npassed to `remove()` as well."}], "signature": "remove(topic, callback, thisObject)", "type": "function", "description": "Unsubscribes a callback from being triggered whenever a notification\nmatching the topic is broadcast throughout the application.\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 58, "name": "notify", "params": [{"line_number": 63, "required": true, "type": "string", "name": "topic", "description": "The topic about which to broadcast a notification.\n"}, {"line_number": 66, "required": false, "type": "value", "name": "subject", "description": "Optional information about the topic.  This can be any JS object or primitive.\nIf you have multiple values to pass to observers, wrap them in an object,\ne.g., `{ foo: 1, bar: \"some string\", baz: myObject }`."}], "signature": "notify(topic, subject)", "type": "function", "description": "Broadcasts a notification event for a topic, passing a subject and data to all\napplicable observers in the application.\n"}], ["markdown", "\n"]]