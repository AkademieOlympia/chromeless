[["version", 2], ["markdown", "<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com] -->\n\nIntroduction\n------------\n\nModule exports `Worker` trait may be used for constructing objects\nimplementing [Worker] interface defined by the W3C, with minor differences.\nContent workers are message-passing facilities for communication between\ncode running in the content and add-on process. It is important to note that\nunlike \"web workers,\" this workers run in the same process as web content and\nbrowser chrome, and therefore code within workers can block UI.\n\n[Worker]:http://www.w3.org/TR/workers/#worker\n\n"], ["api-json", {"line_number": 15, "methods": [{"line_number": 69, "name": "postMessage", "params": [{"line_number": 73, "required": true, "type": "number,string,JSON", "name": "data", "description": "The data to send. Must be stringifiable to JSON."}], "signature": "postMessage(data)", "type": "method", "description": "Asynchronously emits `\"message\"` events in the enclosed worker, where content\nscript was loaded."}], "description": "Worker is composed from the [EventEmitter] trait, therefore instances\nof Worker and their descendants expose all the public properties\nexposed by [EventEmitter] along with additional public properties that\nare listed below.\n\nContent workers may emit two types of events:\n\n####\"message\"#####\nEvent allows the content worker to receive messages from the enclosed content\ncontent scripts. Calling `postMessage` function from the one of the content\nscripts will asynchronously emit 'message' event on the worker.\n\n####\"error\"####\nEvent allows the content worker to react on an uncaught runtime script error\nthat occurs in one of the content scripts.\n\n**Example**\n\n    const workers = require(\"content/worker\");\n    let worker =  workers.Worker({\n      window: require(\"window-utils\").activeWindow,\n      contentScript: \"onMessage = function(data) { \" +\n                     \"  postMessage(window.location + ': Hi ' + data.name); \" +\n                     \"};\",\n      onMessage: function(msg) {\n        console.log(msg);\n      }\n    });\n    worker.postMessage({ name: 'worker'});\n\n[EventEmitter]:#module/api-utils/events\n", "constructors": [{"line_number": 48, "name": "Worker", "params": [{"line_number": 51, "name": "options", "required": true, "props": [{"line_number": 53, "required": true, "type": "object", "name": "window", "description": "The content window to create JavaScript sandbox for communication with."}, {"line_number": 55, "required": false, "type": "string,array", "name": "contentScriptFile", "description": "The local file URLs of content scripts to load.  Content scripts specified\nby this option are loaded *before* those specified by the `contentScript`\noption. Optional."}, {"line_number": 59, "required": false, "type": "string,array", "name": "contentScript", "description": "The texts of content scripts to load.  Content scripts specified by this\noption are loaded *after* those specified by the `contentScriptFile` option.\nOptional."}, {"line_number": 63, "required": false, "type": "function", "name": "onMessage", "description": "Functions that will registered as a listener to a 'message' events."}, {"line_number": 65, "required": false, "type": "function", "name": "onError", "description": "Functions that will registered as a listener to an 'error' events."}], "type": "object", "description": "Options for the constructor, with the following keys:"}], "signature": "Worker(options)", "type": "constructor", "description": "Creates a content worker."}], "type": "class", "name": "Worker"}], ["markdown", "\n\n"]]