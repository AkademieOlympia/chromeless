[["version", 2], ["markdown", "The `events` module provides base API for emitting events.\n\nThis module is not intended to be used directly by programs. Rather, it is\nintended to be used by other modules that provide APIs to programs.\n\n"], ["api-json", {"line_number": 6, "methods": [{"line_number": 19, "name": "on", "params": [{"line_number": 37, "required": true, "type": "String", "name": "type", "description": "The type of event."}, {"line_number": 39, "required": true, "type": "Function", "name": "listener", "description": "The listener function that processes the event."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event `listener` that will be called when events of\nspecified `type` are emitted.\n\nIf the `listener` is already registered for this `type`, a call to this\nmethod has no effect.\n\nIf the event listener is being registered while an event is being processed,\nthe event listener is not called during the current emit.\n\n**Example:**\n\n    // worker is instance of EventEmitter\n    worker.on('message', function (data) {\n      console.log('data received: ' + data)\n    });\n"}, {"line_number": 43, "name": "removeListener", "params": [{"line_number": 54, "required": true, "type": "String", "name": "type", "description": "The type of event."}, {"line_number": 56, "required": true, "type": "Function", "name": "listener", "description": "The listener function that processes the event."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Unregisters an event `listener` for the specified event `type`.\n\nIf the `listener` is not registered for this `type`, a call to this\nmethod has no effect.\n\nIf an event listener is removed while an event is being processed, it is\nstill triggered by the current emit. After it is removed, the event listener\nis never invoked again (unless registered again for future processing).\n"}], "description": "The EventEmitter is the base building block for all compositions that\nwould need to broadcast data to multiple consumers.\n\nPlease note that `EventEmitter` does not expose either a method for emitting\nevents or a list of available event listeners as its public API. Obviously\nboth are accessible but from the instance itself through the private API.\n\n", "constructors": [{"line_number": 14, "signature": "EventEmitter()", "type": "constructor", "name": "EventEmitter", "description": "Creates an EventEmitter object."}], "type": "class", "name": "EventEmitter"}], ["markdown", "\n"]]