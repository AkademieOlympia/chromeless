{
  "addon-kit": {
    "desc": "Add-on development made easy.", 
    "modules": {
      "clipboard": {
        "filename": "clipboard.js", 
        "module": "clipboard"
      }, 
      "notifications": {
        "filename": "notifications.js", 
        "module": "notifications"
      }, 
      "request": {
        "classes": [
          {
            "constructor": {
              "desc": "This constructor creates a request object that can be used to make network\nrequests. The constructor takes a single parameter `options` which is used to\nset several properties on the resulting `Request`.", 
              "params": [
                {
                  "desc": "Contains the following properties:\n\n**url** (*string*)\n\nThis is the url to which the request will be made.\n\n**[onComplete]** (*function*)\n\nThis function will be called when the request has received a response (or in\nterms of XHR, when `readyState == 4`). The function is passed a `Response`\nobject.\n\n**[headers]** (*object*)\n\nAn unordered collection of name/value pairs representing headers to send\nwith the request.\n\n**[content]** (*string*,*object*)\n\nThe content to send to the server. If `content` is a string, it\nshould be URL-encoded (use `encodeURIComponent`). If `content` is\nan object, it should be a collection of name/value pairs. Nested\nobjects & arrays should encode safely.\n\nFor `GET` requests, the query string (`content`) will be appended\nto the URL. For `POST` requests, the query string will be sent as\nthe body of the request.\n\n**[contentType]** (*string*)\n\nThe type of content to send to the server. This explicitly sets the\n`Content-Type` header. The default value is `application/x-www-form-urlencoded`.", 
                  "name": "options", 
                  "type": "object"
                }
              ]
            }, 
            "desc": "The `Request` object is used to make `GET` or `POST` network requests. It is\nconstructed with a URL to which the request is sent. Optionally the user may\nspecify a collection of headers and content to send alongside the request and\na callback which will be executed once the request completes.\n\nOnce a `Request` object has been created a `GET` request can be executed by\ncalling its `get()` method, or a `POST` request by calling its `post()` method.\n\nWhen the server completes the request, the `Request` object emits a \"complete\"\nevent.  Registered event listeners are passed a `Response` object.\n\nEach `Request` object is designed to be used once. Once `GET` or `POST` are\ncalled, attempting to call either will throw an error.\n\nSince the request is not being made by any particular website, requests made\nhere are not subject to the same-domain restriction that requests made in web\npages are subject to.\n\nWith the exception of `response`, all of a `Request` object's properties\ncorrespond with the options in the constructor. Each can be set by simply\nperforming an assignment. However, keep in mind that the same validation rules\nthat apply to `options` in the constructor will apply during assignment. Thus,\neach can throw if given an invalid value.\n\nThe example below shows how to use Request to get the most recent public tweet.\n\n    var Request = require('request').Request;\n    var latestTweetRequest = Request({\n      url: \"http://api.twitter.com/1/statuses/public_timeline.json\",\n      onComplete: function (response) {\n        var tweet = response.json[0];\n        console.log(\"User: \" + tweet.user.screen_name);\n        console.log(\"Tweet: \" + tweet.text);\n      }\n    });\n\n    // Be a good consumer and check for rate limiting before doing more.\n    Request({\n      url: \"http://api.twitter.com/1/account/rate_limit_status.json\",\n      onComplete: function (response) {\n        if (response.json.remaining_hits) {\n          latestTweetRequest.get();\n        } else {\n          console.log(\"You have been rate limited!\");\n        }\n      }\n    }).get();", 
            "functions": [
              {
                "desc": "Make a `GET` request.", 
                "name": "get", 
                "returns": {
                  "desc": "", 
                  "type": "Request"
                }
              }, 
              {
                "desc": "Make a `GET` request.", 
                "name": "post", 
                "returns": {
                  "desc": "", 
                  "type": "Request"
                }
              }
            ], 
            "name": "Request", 
            "properties": [
              {
                "name": "url", 
                "type": "string"
              }, 
              {
                "desc": "{string,object}", 
                "name": "content"
              }, 
              {
                "name": "contentType", 
                "type": "string"
              }, 
              {
                "name": "response", 
                "type": "Response"
              }
            ]
          }, 
          {
            "desc": "The Response object contains the response to a network request issued using a\n`Request` object. It is returned by the `get()` or `post()` method of a\n`Request` object.\n\nAll members of a `Response` object are read-only.", 
            "name": "Response", 
            "properties": [
              {
                "desc": "The content of the response as plain text.", 
                "name": "text", 
                "type": "string"
              }, 
              {
                "desc": "The HTTP response status code (e.g. *200*).", 
                "name": "status", 
                "type": "string"
              }, 
              {
                "desc": "The HTTP response status line (e.g. *OK*).", 
                "name": "statusText", 
                "type": "string"
              }, 
              {
                "desc": "The content of the response as a JavaScript object. The value will be `null`\nif the document cannot be processed by `JSON.parse`.", 
                "name": "json", 
                "type": "object"
              }, 
              {
                "desc": "The HTTP response headers represented as key/value pairs.", 
                "name": "headers", 
                "type": "object"
              }
            ]
          }
        ], 
        "filename": "request.js", 
        "module": "request"
      }, 
      "simple-storage": {
        "desc": "An extremely simple persistent key/value store.\n\n Introduction\n------------\n\nThe simple storage module exports an object called `storage` that is persistent\nand private to your application.  It's a normal JavaScript object, and you can treat\nit as you would any other.\n\nTo store a value, just assign it to a property on `storage`:\n\n    var ss = require(\"simple-storage\");\n    ss.storage.myArray = [1, 1, 2, 3, 5, 8, 13];\n    ss.storage.myBoolean = true;\n    ss.storage.myNull = null;\n    ss.storage.myNumber = 3.1337;\n    ss.storage.myObject = { a: \"foo\", b: { c: true }, d: null };\n    ss.storage.myString = \"O frabjous day!\";\n\nYou can store array, boolean, number, object, null, and string values.  If you'd\nlike to store other types of values, you'll first have to convert them to\nstrings or another one of these types.\n\nBe careful to set properties on the `storage` object and not the module itself:\n\n    // This is no good!\n    var ss = require(\"simple-storage\");\n    ss.foo = \"I will not be saved! :(\";\n\nQuotas\n------\n\nThe simple storage available to your application is limited.  Currently this limit is\nabout five megabytes (5,242,880 bytes).  You can choose to be notified when you\ngo over quota, and you should respond by reducing the amount of data in storage.\nIf the user quits the application while you are over quota, all data stored\nsince the last time you were under quota will not be persisted.  You should not\nlet that happen.\n\nTo listen for quota notifications, register a listener for the `\"OverQuota\"`\nevent.  It will be called when your storage goes over quota.\n\n    function myOnOverQuotaListener() {\n      console.log(\"Uh oh.\");\n    }\n    ss.on(\"OverQuota\", myOnOverQuotaListener);\n\nListeners can also be removed:\n\n    ss.removeListener(\"OverQuota\", myOnOverQuotaListener);\n\nTo find out how much of your quota you're using, check the module's `quotaUsage`\nproperty.  It indicates the percentage of quota your storage occupies.  If\nyou're within your quota, it's a number from 0 to 1, inclusive, and if you're\nover, it's a number greater than 1.\n\nTherefore, when you're notified that you're over quota, respond by removing\nstorage until your `quotaUsage` is less than or equal to 1.  Which particular\ndata you remove is up to you.  For example:\n\n    ss.storage.myList = [\n      // some long array\n    ];\n    ss.on(\"OverQuota\", function () {\n      while (ss.quotaUsage > 1)\n        ss.storage.myList.pop();\n    });\n\nTODOS\n-----\n\nSimple storage is *not*.  For the purposes of chromeless we should remove\nthis quota and perhaps make it write through, or at least expose a sync()\nmethod.", 
        "filename": "simple-storage.js", 
        "module": "simple-storage", 
        "properties": [
          {
            "desc": "A special property which may be read or write and is backed\nby a (JSON formatted) disk file for persistence.", 
            "name": "storage", 
            "type": "object"
          }, 
          {
            "desc": "(read-only) Returns the amount of the quota used by this store", 
            "name": "quotaUsage", 
            "type": "XXX"
          }, 
          {
            "desc": "set a listener to be notified on interesting, events like when you're\nover quota.", 
            "name": "on", 
            "params": [
              {
                "desc": "The name of the event to listen for, the only supported event is\n`OverQuota`.", 
                "name": "event", 
                "type": "string"
              }, 
              {
                "desc": "a function to be invoked when the event fires.", 
                "name": "listener", 
                "type": "function"
              }
            ]
          }, 
          {
            "desc": "remove a listener previously set via the `on` method.", 
            "name": "removeListener", 
            "params": [
              {
                "desc": "The name of the event to remove a listener for, the only supported event is\n`OverQuota`.", 
                "name": "event", 
                "type": "string"
              }, 
              {
                "desc": "a reference to the function that was previously set as a listener with `on`", 
                "name": "listener", 
                "type": "function"
              }
            ]
          }
        ]
      }
    }, 
    "name": "addon-kit"
  }, 
  "api-utils": {
    "desc": "Foundational infrastructure and utilities.", 
    "modules": {
      "StringBundle": {
        "desc": "A bundle of strings.", 
        "filename": "app-strings.js", 
        "module": "StringBundle"
      }, 
      "addCollectionProperty": {
        "desc": "Adds a collection property to the given object.  Setting the property to a\nscalar value empties the collection and adds the value.  Setting it to an\narray empties the collection and adds all the items in the array.", 
        "filename": "collection.js", 
        "module": "addCollectionProperty"
      }, 
      "byte-streams": {
        "classes": [
          {
            "constructor": {
              "desc": "Creates a binary input stream that reads bytes from a backing stream.", 
              "params": [
                {
                  "desc": "The backing stream, an [`nsIInputStream`](http://mxr.mozilla.org/mozilla-central/source/xpcom/io/nsIInputStream.idl).", 
                  "name": "inputStream", 
                  "type": "stream"
                }
              ]
            }, 
            "functions": [
              {
                "desc": "Closes both the stream and its backing stream.", 
                "name": "close", 
                "throws": [
                  {
                    "desc": "If the stream is already closed."
                  }
                ]
              }, 
              {
                "desc": "Reads bytes from the stream.", 
                "name": "read", 
                "params": [
                  {
                    "desc": "The number of bytes to read.  If not given, the remainder of the entire stream\nis read.", 
                    "name": "[numBytes]", 
                    "type": "number"
                  }
                ], 
                "returns": {
                  "desc": "A string containing the bytes read.  If the stream is at the end, returns the\nempty string.", 
                  "type": "string"
                }, 
                "throws": [
                  {
                    "desc": "If the stream is already closed."
                  }
                ]
              }
            ], 
            "name": "ByteReader", 
            "properties": [
              {
                "desc": "True if the stream is closed.", 
                "name": "closed", 
                "type": "boolean"
              }
            ]
          }, 
          {
            "constructor": {
              "desc": "Creates a binary output stream that writes bytes to a backing stream.", 
              "params": [
                {
                  "desc": "The backing stream, an [nsIOutputStream](http://mxr.mozilla.org/mozilla-central/source/xpcom/io/nsIOutputStream.idl).", 
                  "name": "outputStream", 
                  "type": "stream"
                }
              ]
            }, 
            "functions": [
              {
                "desc": "Closes both the stream and its backing stream.", 
                "name": "close", 
                "throws": [
                  {
                    "desc": "If the stream is already closed."
                  }
                ]
              }, 
              {
                "desc": "Writes a string to the stream.", 
                "name": "write", 
                "params": [
                  {
                    "desc": "The string to write.", 
                    "name": "str", 
                    "type": "string"
                  }
                ], 
                "throws": [
                  {
                    "desc": "if the stream is closed"
                  }
                ]
              }
            ], 
            "name": "ByteWriter", 
            "properties": [
              {
                "desc": "True if the stream is closed.", 
                "name": "closed", 
                "type": "boolean"
              }
            ]
          }
        ], 
        "desc": "The `byte-streams` module provides streams for reading and writing bytes.", 
        "filename": "byte-streams.js", 
        "module": "byte-streams"
      }, 
      "content": {
        "filename": "content.js", 
        "module": "content"
      }, 
      "cuddlefish": {
        "filename": "cuddlefish.js", 
        "module": "cuddlefish"
      }, 
      "dom": {
        "filename": "windows/dom.js", 
        "module": "dom"
      }, 
      "e10s": {
        "filename": "e10s.js", 
        "module": "e10s"
      }, 
      "errors": {
        "filename": "errors.js", 
        "module": "errors"
      }, 
      "events": {
        "filename": "tabs/events.js", 
        "module": "events"
      }, 
      "file": {
        "classes": [
          {
            "constructor": {
              "name": "File", 
              "params": [
                {
                  "desc": "The path from which to construct a File object.", 
                  "name": "path", 
                  "type": "string"
                }
              ], 
              "returns": {
                "desc": "an object representation of a file", 
                "type": "File"
              }
            }, 
            "desc": "A file abstraction that allows direct access to meta-data\nabout a file.", 
            "functions": [
              {
                "desc": "Check file existence.", 
                "name": "exists", 
                "returns": {
                  "desc": "true if the file exists.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isWritable", 
                "returns": {
                  "desc": "true if the file is writable.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isReadble", 
                "returns": {
                  "desc": "true if the file is readable.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isExecutable", 
                "returns": {
                  "desc": "true if the file is executable.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isHidden", 
                "returns": {
                  "desc": "true if the file is hidden.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isDirectory", 
                "returns": {
                  "desc": "true if the file is a directory.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isDirectory", 
                "returns": {
                  "desc": "true if the file is a regular file.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isDirectory", 
                "returns": {
                  "desc": "true if the file is a symlink.", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "isSpecial", 
                "returns": {
                  "desc": "true if the file is a special file (i.e. device)", 
                  "type": "boolean"
                }
              }, 
              {
                "name": "toString", 
                "returns": {
                  "desc": "concoct a reasonable string representation of a file", 
                  "type": "string"
                }
              }
            ], 
            "name": "File", 
            "properties": [
              {
                "desc": "The file's permissions (follows symlinks)", 
                "name": "permissions"
              }, 
              {
                "desc": "The file's permissions (does not follow symlinks)", 
                "name": "permissionsOfLink"
              }, 
              {
                "desc": "The last time this file was modified (follows symlinks)", 
                "name": "lastModifiedTime"
              }, 
              {
                "desc": "The last time this file was modified (does not follow symlinks)", 
                "name": "lastModifiedTimeOfLink"
              }, 
              {
                "desc": "Size of file in bytes (follows symlinks)", 
                "name": "fileSize", 
                "type": "integer"
              }, 
              {
                "desc": "Size of file in bytes (does not follow symlinks)", 
                "name": "fileSize", 
                "type": "integer"
              }, 
              {
                "desc": "The absolute path to the file", 
                "name": "path", 
                "type": "string"
              }, 
              {
                "desc": "The absolute path to the parent of the file", 
                "name": "path", 
                "type": "string"
              }
            ]
          }
        ], 
        "desc": "Allows for the reading and writing of files.", 
        "filename": "file.js", 
        "functions": [
          {
            "desc": "Opens a file in text mode and returns a string containing its entire contents.", 
            "name": "read", 
            "params": [
              {
                "desc": "The path of the file to read.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A string containing the file's entire contents.", 
              "type": "string"
            }
          }, 
          {
            "desc": "Creates a text file and writes the entir contents of a string to\nit.", 
            "name": "write", 
            "params": [
              {
                "desc": "The path at which the file should be created", 
                "name": "path"
              }, 
              {
                "desc": "The content to write.", 
                "name": "content"
              }
            ], 
            "throws": [
              {
                "desc": "if file exists, or cannot be created."
              }
            ]
          }, 
          {
            "desc": "Returns a stream providing access to the contents of a file.", 
            "name": "open", 
            "params": [
              {
                "desc": "The path of the file to open.", 
                "name": "path", 
                "type": "string"
              }, 
              {
                "desc": "An optional string, each character of which describes a characteristic of the\nreturned stream.  If the string contains `\"r\"`, the file is opened in\nread-only mode.  `\"w\"` opens the file in write-only mode.  `\"b\"` opens the\nfile in binary mode.  If `\"b\"` is not present, the file is opened in text\nmode, and its contents are assumed to be UTF-8.  If *`mode`* is not given,\n`\"r\"` is assumed, and the file is opened in read-only text mode.", 
                "name": "[mode]", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A stream that can be used to access or modify the contents of the file.  See\n[`text-streams`](#module/api-utils/text-streams) and\n[`byte-streams`](#module/api-utils/byte-streams) for more information.\nOpened files should always be closed after use by calling `close` on the\nreturned stream.", 
              "type": "stream"
            }
          }
        ], 
        "module": "file"
      }, 
      "find-tests": {
        "filename": "find-tests.js", 
        "module": "find-tests"
      }, 
      "find-tests-e10s-adapter": {
        "filename": "find-tests-e10s-adapter.js", 
        "module": "find-tests-e10s-adapter"
      }, 
      "friendlyError": {
        "desc": "Returns an Error instance that is a more descriptive version of the raw XPCOM\nerrOrResult.  opts is used by some exceptions to include helpful info in\ntheir messages such as a filename, and as such its properties depend on the\ntype of exception being thrown.  opts need not be defined for errors that\ndon't use it.  See below for a list of supported options.\n\nIf there is no friendly version of errOrResult, then if it's an nsIException,\nan Error whose message is errOrResult's message is returned; if it's a\nresult, an Error with a simple numeric message is returned; and if it's an\nError, it itself is returned.", 
        "filename": "xpcom.js", 
        "module": "friendlyError"
      }, 
      "function": {
        "desc": "Takes a function and returns a wrapped one instead, calling which will call\noriginal function in the next turn of event loop. This is basically utility\nto do `setTimeout(function() { ... }, 0)`, with a difference that returned\nfunction is reused, instead of creating a new one each time. This also allows\nto use this functions as event listeners.", 
        "filename": "utils/function.js", 
        "module": "function"
      }, 
      "getFaviconURIForLocation": {
        "desc": "Takes URI of the page and returns associated favicon URI.\nIf page under passed uri has no favicon then base64 encoded data URI of\ndefault faveicon is returned.", 
        "filename": "utils/data.js", 
        "module": "getFaviconURIForLocation"
      }, 
      "hidden-frame": {
        "filename": "hidden-frame.js", 
        "module": "hidden-frame"
      }, 
      "loader": {
        "desc": "Trait provides private `_window` property and requires `_onLoad` property\nthat will be called when `_window` is loaded. If `_window` property value\nis changed with already loaded window `_onLoad` still will be called.", 
        "filename": "windows/loader.js", 
        "module": "loader"
      }, 
      "match-pattern": {
        "filename": "match-pattern.js", 
        "module": "match-pattern"
      }, 
      "memory": {
        "filename": "memory.js", 
        "module": "memory"
      }, 
      "plain-text-console": {
        "filename": "plain-text-console.js", 
        "module": "plain-text-console"
      }, 
      "preferences-service": {
        "filename": "preferences-service.js", 
        "module": "preferences-service"
      }, 
      "publicConstructor": {
        "desc": "Returns a function C that creates instances of privateCtor.  C may be called\nwith or without the new keyword.  The prototype of each instance returned\nfrom C is C.prototype, and C.prototype is an object whose prototype is\nprivateCtor.prototype.  Instances returned from C will therefore be instances\nof both C and privateCtor.  Additionally, the constructor of each instance\nreturned from C is C.", 
        "filename": "api-utils.js", 
        "functions": [
          {
            "desc": "Returns a validated options dictionary given some requirements.  If any of\nthe requirements are not met, an exception is thrown.", 
            "name": "validateOptions", 
            "params": [
              {
                "desc": "An object, the options dictionary to validate.  It's not modified.\n        If it's null or otherwise falsey, an empty object is assumed.", 
                "name": "options"
              }, 
              {
                "desc": "An object whose keys are the expected keys in options.  Any key in\n        options that is not present in requirements is ignored.  Each value\n        in requirements is itself an object describing the requirements of\n        its key.  There are four optional keys in this object:\n          map: A function that's passed the value of the key in options.\n               map's return value is taken as the key's value in the final\n               validated options, is, and ok.  If map throws an exception\n               it's caught and discarded, and the key's value is its value in\n               options.\n          is:  An array containing any number of the typeof type names.  If\n               the key's value is none of these types, it fails validation.\n               Arrays and null are identified by the special type names\n               \"array\" and \"null\"; \"object\" will not match either.  No type\n               coercion is done.\n          ok:  A function that's passed the key's value.  If it returns\n               false, the value fails validation.\n          msg: If the key's value fails validation, an exception is thrown.\n               This string will be used as its message.  If undefined, a\n               generic message is used, unless is is defined, in which case\n               the message will state that the value needs to be one of the\n               given types.", 
                "name": "requirements"
              }
            ], 
            "returns": {
              "desc": "An object whose keys are those keys in requirements that are also in\n        options and whose values are the corresponding return values of map\n        or the corresponding values in options.  Note that any keys not\n        shared by both requirements and options are not in the returned\n        object."
            }
          }
        ], 
        "module": "publicConstructor"
      }, 
      "registry": {
        "filename": "utils/registry.js", 
        "module": "registry"
      }, 
      "securable-module": {
        "filename": "securable-module.js", 
        "module": "securable-module"
      }, 
      "self": {
        "filename": "self.js", 
        "module": "self"
      }, 
      "self-e10s-adapter": {
        "filename": "self-e10s-adapter.js", 
        "module": "self-e10s-adapter"
      }, 
      "symbiont": {
        "desc": "This trait is layered on top of `Worker` and in contrast to symbiont\nWorker constructor requires `content` option that represents content\nthat will be loaded in the provided frame, if frame is not provided\nWorker will create hidden one.", 
        "filename": "content/symbiont.js", 
        "module": "symbiont"
      }, 
      "tab": {
        "desc": "Trait used to create tab wrappers.", 
        "filename": "tabs/tab.js", 
        "module": "tab"
      }, 
      "tab-browser": {
        "desc": "**************** TabModule ********************", 
        "filename": "tab-browser.js", 
        "functions": [
          {
            "desc": "TabModule\n\nConstructor for a module that implements the tabs API", 
            "name": "TabModule"
          }
        ], 
        "module": "tab-browser"
      }, 
      "tabs": {
        "desc": "This is a trait that is used in composition of window wrapper. Trait tracks\ntab related events of the wrapped window in order to keep truck of open\ntabs and maintain their wrappers. Every new tab is gets wrapped and jetpack\ntype event is emitted.", 
        "filename": "windows/tabs.js", 
        "module": "tabs"
      }, 
      "text-streams": {
        "classes": [
          {
            "constructor": {
              "params": [
                {
                  "desc": "The stream is backed by this nsIInputStream.  It must already be\n  opened.", 
                  "name": "inputStream"
                }, 
                {
                  "desc": "Text in inputStream is expected to be in this character encoding.  If\n  not given, \"UTF-8\" is assumed.  See nsICharsetConverterManager.idl for\n  documentation on how to determine other valid values for this.", 
                  "name": "charset"
                }
              ]
            }, 
            "desc": "An input stream that reads text from a backing stream using a given text\nencoding.", 
            "functions": [
              {
                "desc": "Reads a string from the stream.  If the stream is closed, an exception is\nthrown.", 
                "name": "read", 
                "params": [
                  {
                    "desc": "The number of characters to read.  If not given, the remainder of\n        the stream is read.", 
                    "name": "numChars"
                  }
                ], 
                "returns": {
                  "desc": "The string read.  If the stream is already at EOS, returns the\n        empty string."
                }
              }
            ], 
            "name": "TextReader"
          }
        ], 
        "filename": "text-streams.js", 
        "module": "text-streams"
      }, 
      "thumbnail": {
        "desc": "Creates canvas element with a thumbnail of the passed window.", 
        "filename": "utils/thumbnail.js", 
        "functions": [
          {
            "desc": "Creates Base64 encoded data URI of the thumbnail for the passed window.", 
            "name": "getThumbnailURIForWindow", 
            "params": [
              {
                "name": "window", 
                "type": "Window"
              }
            ], 
            "returns": {
              "desc": "", 
              "type": "String"
            }
          }
        ], 
        "module": "thumbnail"
      }, 
      "timer": {
        "filename": "timer.js", 
        "module": "timer"
      }, 
      "timer-e10s-adapter": {
        "filename": "timer-e10s-adapter.js", 
        "module": "timer-e10s-adapter"
      }, 
      "traceback": {
        "filename": "traceback.js", 
        "module": "traceback"
      }, 
      "traits": {
        "desc": "Work around bug 608959 by defining the _create function here instead of\nimporting it from traits/core.  For docs on this function, see the create\nfunction in that module.\n\nFIXME: remove this workaround in favor of importing the function once that\nbug has been fixed.", 
        "filename": "traits.js", 
        "module": "traits"
      }, 
      "unit-test": {
        "filename": "unit-test.js", 
        "module": "unit-test"
      }, 
      "unit-test-finder": {
        "filename": "unit-test-finder.js", 
        "module": "unit-test-finder"
      }, 
      "unload": {
        "filename": "unload.js", 
        "module": "unload"
      }, 
      "url": {
        "classes": [
          {
            "constructor": {
              "desc": "The URL constructor creates an object that represents a URL,  verifying that\nthe provided string is a valid URL in the process.", 
              "params": [
                {
                  "desc": "A string to be converted into a URL.", 
                  "name": "url", 
                  "type": "string"
                }, 
                {
                  "desc": "An optional base url which will be used to resolve the\n`url` argument if it is a relative url.", 
                  "name": "[base]", 
                  "type": "string"
                }
              ], 
              "throws": [
                {
                  "desc": "If `source` is not a valid URI."
                }
              ]
            }, 
            "desc": "A class which parses a url and exposes its various\ncomponents separately.", 
            "functions": [
              {
                "desc": "Converts URL class contents to a string.", 
                "name": "toString", 
                "returns": {
                  "desc": "The URL as a string.", 
                  "type": "string"
                }
              }
            ], 
            "name": "URL", 
            "properties": [
              {
                "desc": "The name of the protocol in the URL.", 
                "name": "scheme", 
                "type": "string"
              }, 
              {
                "desc": "The username:password part of the URL, `null` if not present.", 
                "name": "userPass", 
                "type": "string"
              }, 
              {
                "desc": "The host of the URL, `null` if not present.", 
                "name": "host", 
                "type": "string"
              }, 
              {
                "desc": "The port number of the URL, `null` if none was specified.", 
                "name": "port", 
                "type": "integer"
              }, 
              {
                "desc": "The path component of the URL.", 
                "name": "path", 
                "type": "string"
              }
            ]
          }
        ], 
        "desc": "A URL parsing library and some utility routines to convert between native\npaths.  Includes a class representation of URLs that may be used in\nmany other modules.", 
        "filename": "url.js", 
        "functions": [
          {
            "desc": "given a string (typically the result of human input), attempt to\nguess the well formed URL intended.  For instanced, this function\nwill turn `mozilla.com` into `http://mozilla.com`", 
            "name": "guess", 
            "params": [
              {
                "desc": "A url fragment", 
                "name": "fragment", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A guess at a well formed url.", 
              "type": "string"
            }
          }, 
          {
            "desc": "build a URL from a filename.", 
            "name": "fromFilename", 
            "params": [
              {
                "desc": "The path to convert.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A string representation of a URL.", 
              "type": "string"
            }
          }, 
          {
            "desc": "build a filename from a url.", 
            "name": "toFilename", 
            "params": [
              {
                "desc": "The path to convert.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A string representation of a URL.", 
              "type": "string"
            }
          }
        ], 
        "module": "url"
      }, 
      "versionInRange": {
        "desc": "Use this to check whether the given version (e.g. xulApp.platformVersion)\nis in the given range. Versions must be in version comparator-compatible\nformat. See MDC for details:\nhttps://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIVersionComparator", 
        "filename": "xul-app.js", 
        "module": "versionInRange"
      }, 
      "windowIterator": {
        "desc": "An iterator for XUL windows currently in the application.", 
        "filename": "window-utils.js", 
        "module": "windowIterator"
      }, 
      "xhr": {
        "filename": "xhr.js", 
        "module": "xhr"
      }
    }, 
    "name": "api-utils"
  }, 
  "chromeless": {
    "desc": "Chromeless Browser Dev Kit based on Jetpack SDK. Application development made easy.", 
    "modules": {
      "main": {
        "filename": "main.js", 
        "module": "main"
      }
    }, 
    "name": "chromeless"
  }, 
  "chromeless-kit": {
    "desc": "Miscellaneous Modules", 
    "modules": {
      "app-paths": {
        "desc": "Returns various paths that are pertinent to the currently running\napplication and logged in user.", 
        "filename": "app-paths.js", 
        "module": "app-paths", 
        "properties": [
          {
            "desc": "The currently active *profile*, which is a user specific directory where\nuser scoped application data may reside, such as preferences and history.", 
            "name": "profileDir", 
            "type": "string"
          }, 
          {
            "desc": "The path where the *browser code* of the application resides on disk.\nFor an installed application this usually be nested inside of a system wide installation path.\nThis path should be expected to be read-only.", 
            "name": "browserCodeDir", 
            "type": "string"
          }, 
          {
            "desc": "The path to the user's desktop.", 
            "name": "desktopDir", 
            "type": "string"
          }, 
          {
            "desc": "The path to the currently logged in user's home directory.", 
            "name": "userHomeDir", 
            "type": "string"
          }, 
          {
            "desc": "In chromeless, *profiles* are specially named directories stored\nin a user scoped location.  Support for multiple profiles is built in at a very\nlow level, and the basic mechanism by which profiles are supported is a two\nlevel directory structure.  This property provides the path to the \"outer\" or\n\"root\" profile directory, under which different profiles reside.", 
            "name": "profileRootDir", 
            "type": "string"
          }, 
          {
            "desc": "The path to the directory where web plugins will be loaded for this\napplication.", 
            "name": "pluginsDir", 
            "type": "string"
          }, 
          {
            "desc": "The current working directory of the chromeless application process.", 
            "name": "curDir", 
            "type": "string"
          }, 
          {
            "desc": "The system's temporary directory.", 
            "name": "tmpDir", 
            "type": "string"
          }
        ]
      }, 
      "canvas-proxy": {
        "filename": "canvas-proxy.js", 
        "module": "canvas-proxy"
      }, 
      "child_process": {
        "desc": "Stops the server from accepting new connections. This function is\nasynchronous, the server is finally closed when the server emits a\n'close' event.", 
        "filename": "child_process.js", 
        "module": "child_process"
      }, 
      "chromeless-sandbox-window": {
        "filename": "chromeless-sandbox-window.js", 
        "module": "chromeless-sandbox-window"
      }, 
      "console-service": {
        "filename": "console-service.js", 
        "module": "console-service"
      }, 
      "custom-protocol": {
        "filename": "custom-protocol.js", 
        "module": "custom-protocol"
      }, 
      "dictionary": {
        "filename": "dictionary.js", 
        "module": "dictionary"
      }, 
      "dragdrop": {
        "desc": "Tools for enhancing drag and drop session. It makes possible to associate \na file with an existing drag session, and to write a file to the disk\nwhen the drop happens in the OS folder.", 
        "filename": "dragdrop.js", 
        "functions": [
          {
            "desc": "Given an existing drag event, associates a system file, a mode of \noperation ( not yet implemented, default is to write a new file ), \nand developer's callback for success or error ( when the drag fails .)", 
            "name": "setDragData", 
            "params": [
              {
                "desc": "the existing drag session event.", 
                "name": "currentEvent", 
                "type": "event"
              }, 
              {
                "desc": "is a native path to the file.", 
                "name": "fullPath", 
                "type": "string"
              }, 
              {
                "desc": "is the string name to be given to the copy of the file.", 
                "name": "leafName", 
                "type": "string"
              }, 
              {
                "desc": "is string that indicates what operation to perform. Only \"write\" is supported and this parameter is not yet checked.", 
                "name": "mode", 
                "type": "string"
              }, 
              {
                "desc": "for success.", 
                "name": "callback", 
                "type": "function"
              }, 
              {
                "desc": "for error.", 
                "name": "callback", 
                "type": "function"
              }
            ]
          }
        ], 
        "module": "dragdrop"
      }, 
      "errors": {
        "filename": "errors.js", 
        "module": "errors"
      }, 
      "favicon": {
        "desc": "Tools for accessing favicons, which use a local cache to minimize\nnetwork requests", 
        "filename": "favicon.js", 
        "functions": [
          {
            "desc": "Given the URI of a page, query the local cache for a\nfavicon.", 
            "name": "getCached", 
            "params": [
              {
                "desc": "The URI of the page for which a favicon is desired.", 
                "name": "uri", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "The favicon as a data URL.  If no such favicon is in the cache,\nnull is returned.", 
              "type": "string"
            }
          }, 
          {
            "desc": "Get a default favicon image.", 
            "name": "getDefault", 
            "returns": {
              "desc": "A data URL containing a default favicon image", 
              "type": "string"
            }
          }, 
          {
            "desc": "Fetch the favicon for a particular page.  This function will return\nthe favicon from the cache if available, but otherwise will issue a\nnetwork request to attempt to fetch a site's favicon.", 
            "name": "fetch", 
            "params": [
              {
                "desc": "The page for which a favicon will be fetched.", 
                "name": "uri", 
                "type": "string"
              }, 
              {
                "desc": "A callback that will be invoked once the fetch is\n  complete.  Will be passed a single string argument which is a data url\n  containing the favicon requested.  If the icon couldn't be fetched or\n  is not available, a default will be returned.", 
                "name": "cb", 
                "type": "function"
              }
            ]
          }
        ], 
        "module": "favicon"
      }, 
      "fs": {
        "desc": "The fs module provides means to interact with the file system for manipulating\nand querying files and directories.", 
        "filename": "fs.js", 
        "functions": [
          {
            "desc": "Returns an array of file names in the given directory.", 
            "name": "list", 
            "params": [
              {
                "desc": "The path of the directory.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "An array of file names.  Each is a basename, not a full path.", 
              "type": "array"
            }, 
            "throws": [
              {
                "desc": "if the path points to something other than a readable directory."
              }
            ]
          }, 
          {
            "desc": "Returns an array of [file object](file.File) in the given directory.", 
            "name": "listObjects", 
            "params": [
              {
                "desc": "The path of the directory.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "An array of file objects.", 
              "type": "array"
            }, 
            "throws": [
              {
                "desc": "if the path points to something other than a readable directory."
              }
            ]
          }, 
          {
            "desc": "Copy a file.", 
            "name": "copy", 
            "params": [
              {
                "desc": "The Path to the source file", 
                "name": "from", 
                "type": "string"
              }, 
              {
                "desc": "The path to the destination file", 
                "name": "to", 
                "type": "string"
              }
            ], 
            "throws": [
              {
                "desc": "if the operation cannot be completed."
              }
            ]
          }, 
          {
            "desc": "Move a file to a new location.", 
            "name": "move", 
            "params": [
              {
                "desc": "The Path to the source file", 
                "name": "from", 
                "type": "string"
              }, 
              {
                "desc": "The path to the destination file", 
                "name": "to", 
                "type": "string"
              }
            ], 
            "throws": [
              {
                "desc": "if the operation cannot be completed."
              }
            ]
          }, 
          {
            "desc": "Returns true if a file exists at the given path and false otherwise.", 
            "name": "exists", 
            "params": [
              {
                "desc": "The path to a file.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "True if the file exists and false otherwise.", 
              "type": "boolean"
            }
          }, 
          {
            "desc": "Given a path returns metadata about the file or directory.  If the path is a symlink it\nwill be dereferenced and information about the underlying file will be returned", 
            "name": "stat", 
            "params": [
              {
                "desc": "The path to a file.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "Returns an object with information about the file, including:\n\n + `type` - either 'file' or 'directory'\n + `numEntries` - (for directories), the number of files in the directory.\n + `size` - (for files), the size of the file in bytes.\n + `lastModified` - (for files), the time (in seconds since epoch) of the last file modification.", 
              "type": "object"
            }, 
            "throws": [
              {
                "desc": "if file doesn't exist"
              }
            ]
          }, 
          {
            "desc": "Removes a file from the file system.  To remove directories, use `rmdir`.", 
            "name": "remove", 
            "params": [
              {
                "desc": "The path of the file to remove.", 
                "name": "path", 
                "type": "string"
              }
            ]
          }, 
          {
            "desc": "Makes a new directory named by the given path.  Any subdirectories that do not\nexist are also created.  `mkpath` can be called multiple times on the same\npath.", 
            "name": "mkpath", 
            "params": [
              {
                "desc": "The path to create.", 
                "name": "path", 
                "type": "string"
              }
            ]
          }, 
          {
            "desc": "Removes a directory from the file system.  If the directory is not empty, an\nexception is thrown.", 
            "name": "rmdir", 
            "params": [
              {
                "desc": "The path of the directory to remove.", 
                "name": "path", 
                "type": "string"
              }
            ]
          }
        ], 
        "module": "fs"
      }, 
      "fullscreen": {
        "desc": "Allows one to control fullscreen view for the main application window", 
        "filename": "fullscreen.js", 
        "functions": [
          {
            "desc": "Size the main application window to consume the full screen", 
            "name": "enable"
          }, 
          {
            "desc": "Disable fullscreen mode (noop if it wasn't enabled)", 
            "name": "disable"
          }, 
          {
            "desc": "Toggle fullscreen.", 
            "name": "toggle"
          }
        ], 
        "module": "fullscreen"
      }, 
      "getCurrentWindow": {
        "desc": "Return the current window. This function does not exist outside of the context of a window.", 
        "filename": "ui.js", 
        "functions": [
          {
            "desc": "Return the application's main window", 
            "name": "getMainWindow"
          }, 
          {
            "desc": "Return the user's idle time (for the desktop, not just the application)", 
            "name": "getIdleTime"
          }, 
          {
            "desc": "Return the application's main MenuItem or null if none is set.", 
            "name": "getMenu"
          }, 
          {
            "desc": "Set a menu for the application", 
            "name": "setMenu"
          }, 
          {
            "desc": "Return this application's context menu or null if none is set.", 
            "name": "getContextMenu"
          }, 
          {
            "desc": "Set the application's context menu", 
            "name": "setContextMenu"
          }, 
          {
            "desc": "Create a new menu", 
            "name": "createMenu"
          }, 
          {
            "desc": "Create a new menu item.", 
            "name": "createMenuItem"
          }, 
          {
            "desc": "Create a new separator menu item.", 
            "name": "createSeperatorMenuItem"
          }, 
          {
            "desc": "Create a new CheckMenuItem object.", 
            "name": "createCheckMenuItem"
          }, 
          {
            "desc": "Set the application icon's badge text.", 
            "name": "setBadge"
          }, 
          {
            "desc": "Set the application icon's badge image.", 
            "name": "setBadgeImage"
          }, 
          {
            "desc": "Set the dock icon", 
            "name": "setDockIcon"
          }, 
          {
            "desc": "Set the dock menu", 
            "name": "setDockMenu"
          }, 
          {
            "desc": "Set the application's icon", 
            "name": "setIcon"
          }, 
          {
            "desc": "Create and add a tray icon", 
            "name": "addTray"
          }, 
          {
            "desc": "Empty the tray of all this application's tray items", 
            "name": "clearTray"
          }, 
          {
            "desc": "create a UI dialog", 
            "name": "showDialog"
          }
        ], 
        "module": "getCurrentWindow", 
        "properties": [
          {
            "desc": "Return a list of currently open windows.", 
            "name": "getWindows"
          }
        ]
      }, 
      "hidden-frame-xulrunner": {
        "filename": "hidden-frame-xulrunner.js", 
        "module": "hidden-frame-xulrunner"
      }, 
      "hotkey": {
        "desc": "Add shortcut key combinations or \"hotkeys\" to your application.", 
        "filename": "hotkey.js", 
        "functions": [
          {
            "dataType": "{string} Return the ID of the hotkey.", 
            "desc": "Register a global hotkey that executes JS specified [command] when the key\ncombination in [hotkey] is pressed.", 
            "name": "register", 
            "params": [
              {
                "desc": "Key combination in the format of 'modifier-key'\n  Examples:\n    accel-s, meta-shift-i, control-alt-d\n  Modifier keynames:\n    shift: The Shift key.\n    alt: The Alt key. On the Macintosh, this is the Option key. On Macintosh \n         this can only be used in conjunction with another modifier, since \n         Alt+Letter combinations are reserved for entering special characters \n         in text.\n    meta: The Meta key. On the Macintosh, this is the Command key.\n    control: The Control key.\n    accel: The key used for keyboard shortcuts on the user's platform, which \n           is Control on Windows and Linux, and Command on Mac. Usually, this \n           would be the value you would use.\n    access: The access key for activating menus and other elements. On Windows, \n            this is the Alt key, used in conjuction with an element's accesskey.\n    any: Indicates that all modifiers preceding it are optional.", 
                "name": "hotkey", 
                "type": "string"
              }, 
              {
                "desc": "{String/Function} command Javascript (may be of type String or Function) \n                                 to execute when the hotkey is executed."
              }, 
              {
                "desc": "Optional. Unique identifier for this hotkey, which will \n                     auto-generated if not provided.", 
                "name": "[id]", 
                "type": "string"
              }
            ], 
            "throws": [
              {
                "desc": "Textual exception that should be caught by the programmer.", 
                "type": "string"
              }
            ]
          }, 
          {
            "dataType": "{void}", 
            "desc": "Register a global hotkey.", 
            "name": "unregister", 
            "params": [
              {
                "name": "hotkey", 
                "type": "string"
              }, 
              {
                "desc": "{string/function} command"
              }, 
              {
                "name": "[id]", 
                "type": "string"
              }
            ], 
            "throws": [
              {
                "desc": "Textual exception that should be caught by the programmer.", 
                "type": "string"
              }
            ]
          }
        ], 
        "module": "hotkey"
      }, 
      "iframe-controls": {
        "desc": "Allows application code to control and inspect iframes", 
        "filename": "iframe-controls.js", 
        "functions": [
          {
            "desc": "stop the loading of content within an iframe", 
            "name": "stopload", 
            "params": [
              {
                "desc": "An iframe dom node.", 
                "name": "frame", 
                "type": "IFrameNode"
              }
            ]
          }, 
          {
            "desc": "Access the title of an iframe.", 
            "name": "title", 
            "params": [
              {
                "desc": "An iframe dom node.", 
                "name": "frame", 
                "type": "IFrameNode"
              }
            ], 
            "returns": {
              "desc": "The current title of the content in the iframe.", 
              "type": "string"
            }
          }, 
          {
            "desc": "inject a function into a web content window", 
            "name": "inject", 
            "params": [
              {
                "desc": "An iframe dom node.", 
                "name": "frame", 
                "type": "IFrameNode"
              }, 
              {
                "desc": "the property of `window.` to which this function shall be\nattached.", 
                "name": "attachPoint", 
                "type": "string"
              }, 
              {
                "desc": "The function that will be invoked when content in the\niframe invokes this function.", 
                "name": "callback", 
                "type": "function"
              }
            ]
          }
        ], 
        "module": "iframe-controls"
      }, 
      "iframe-progress-hooks": {
        "desc": "An internal implementation detail.  nothing to see here.", 
        "filename": "iframe-progress-hooks.js", 
        "module": "iframe-progress-hooks"
      }, 
      "menu": {
        "desc": "Adds one or more elements to the end of an array and returns the new \nlength of the array.", 
        "filename": "ui/menu.js", 
        "module": "menu"
      }, 
      "mime": {
        "desc": "Tools for guessing mime types from file extensions/paths.", 
        "filename": "mime.js", 
        "functions": [
          {
            "desc": "Given a file path (or extension), look up an appropriate mime type.", 
            "name": "guess", 
            "params": [
              {
                "desc": "(`/foo/bar/baz.txt/) or just a file extension (`exe`)", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "appropriate mime type for input", 
              "type": "string"
            }
          }
        ], 
        "module": "mime", 
        "properties": [
          {
            "desc": "The default mime type that will be used when we encounter an unknown extension\ntype.", 
            "name": "defaultMime"
          }
        ]
      }, 
      "net": {
        "desc": "Called to signify the beginning of an asynchronous request", 
        "filename": "net.js", 
        "module": "net"
      }, 
      "path": {
        "desc": "A module that exposes abstract operations on file paths.  Functions\nin this module operate on path strings, but do not ever interact with\nthe file system.  For reading/writing files, see [file].  For other\nfilesystem operations, see [fs].", 
        "filename": "path.js", 
        "functions": [
          {
            "desc": "joins any number of path components with the platform appropriate\npath separator.", 
            "name": "join", 
            "params": [
              {
                "desc": "variable number of parameters to be joined", 
                "name": "A", 
                "type": "strings"
              }
            ], 
            "returns": {
              "desc": "The joined path", 
              "type": "string"
            }
          }, 
          {
            "desc": "normalizes a path and splits it into an array of path components", 
            "name": "split", 
            "params": [
              {
                "desc": "A path to split", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "Path components.", 
              "type": "array"
            }
          }, 
          {
            "desc": "normalizes an array of path components, properly reducing entries such as\n'..' and blank paths.", 
            "name": "normalizeArray", 
            "params": [
              {
                "desc": "Path components.", 
                "name": "components", 
                "type": "array"
              }
            ], 
            "returns": {
              "desc": "Normalized path components.", 
              "type": "array"
            }
          }, 
          {
            "desc": "normalizes a path.", 
            "name": "normalize", 
            "params": [
              {
                "desc": "The path to normalize.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "A normalized path.", 
              "type": "stribg"
            }
          }, 
          {
            "desc": "Given a path, extract the *directory name* component.  For instance,\n`dirname(\"/foo/bar/baz.txt\") --> \"/foo/bar\"`.\n\n*Note: this function operates on strings alone, and will not interact with\nthe file system.*", 
            "name": "dirname", 
            "params": [
              {
                "desc": "A filesystem path.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "The directory part of the path.", 
              "type": "string"
            }
          }, 
          {
            "desc": "Given a path, extract the filename component.  For instance,\n`basename(\"/foo/bar/baz.txt\") --> \"baz.txt\"`.  If an extension\nargument is provided, and matches the extension present in the\npath, it will be removed: `basename(\"/foo/bar/baz.txt\", \".txt\") --> \"baz\"`\n\n*Note: this function operates on strings alone, and will not interact with\nthe file system.*", 
            "name": "basename", 
            "params": [
              {
                "desc": "A filesystem path.", 
                "name": "path", 
                "type": "string"
              }, 
              {
                "desc": "An extension string, if present and matches the\n                 path, will be removed from the resulting filename.", 
                "name": "[ext]", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "The filename component of the path.", 
              "type": "string"
            }
          }, 
          {
            "desc": "Return the extension of a path:\n`extname(\"/foo/bar/baz.txt\") --> \".txt\"`.  If an extension\nargument is provided, and matches the extension present in the\npath, it will be removed: `dirname(\"/foo/bar/baz.txt\", \".txt\") --> \"baz\"`\n\n*Note: this function operates on strings alone, and will not interact with\nthe file system.*", 
            "name": "extname", 
            "params": [
              {
                "desc": "A filesystem path.", 
                "name": "path", 
                "type": "string"
              }
            ], 
            "returns": {
              "desc": "The filename component of the path.", 
              "type": "string"
            }
          }
        ], 
        "module": "path"
      }, 
      "process": {
        "filename": "process.js", 
        "module": "process"
      }, 
      "session-store": {
        "filename": "session-store.js", 
        "module": "session-store"
      }, 
      "simple-feature": {
        "filename": "simple-feature.js", 
        "module": "simple-feature"
      }, 
      "tray": {
        "desc": "Empty the tray of all this application's tray items", 
        "filename": "ui/tray.js", 
        "module": "tray"
      }
    }, 
    "name": "chromeless-kit"
  }, 
  "development-mode": {
    "desc": "Adds Jetpack SDK development functionality to a program.", 
    "modules": {
      "bootstrap": {
        "filename": "bootstrap.js", 
        "module": "bootstrap"
      }, 
      "main": {
        "filename": "main.js", 
        "module": "main"
      }
    }, 
    "name": "development-mode"
  }, 
  "nsjetpack": {
    "desc": "Jetpack binary component.", 
    "modules": {
      "nsjetpack": {
        "filename": "nsjetpack.js", 
        "module": "nsjetpack"
      }
    }, 
    "name": "nsjetpack"
  }, 
  "test-harness": {
    "desc": "A harness for running Jetpack tests.", 
    "modules": {
      "harness": {
        "filename": "harness.js", 
        "module": "harness"
      }, 
      "run-tests": {
        "filename": "run-tests.js", 
        "module": "run-tests"
      }
    }, 
    "name": "test-harness"
  }
}