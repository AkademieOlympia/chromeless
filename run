#!/usr/bin/env python

# A small script to invoke cfx from the jetpack platform with proper arguments.
# accepts a single argument on the command line which is the path to the
# "entry point HTML" - that which should be used as the browser's UI.

import os,sys,re

# set the cuddlefish "root directory" for this process if it's not already
# set in the environment
cuddlefish_root = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), "impl")

if 'CUDDLEFISH_ROOT' not in os.environ:
    os.environ['CUDDLEFISH_ROOT'] = cuddlefish_root

# add our own python-lib path to the python module search path.
python_lib_dir = os.path.join(cuddlefish_root, "python-lib")
if python_lib_dir not in sys.path:
    sys.path.append(python_lib_dir)

# now export to env so sub-processes get it too
if 'PYTHONPATH' not in os.environ:
    os.environ['PYTHONPATH'] = python_lib_dir
elif python_lib_dir not in os.environ['PYTHONPATH'].split(os.pathsep):
    paths = os.environ['PYTHONPATH'].split(os.pathsep)
    paths.insert(0, python_lib_dir)
    os.environ['PYTHONPATH'] = os.pathsep.join(paths)

def findBrowserHTML(path):
    # "examples" directory can be omitted, but we'll automatically append it to
    # verify that file exists.
    if not os.path.exists(path):
        path = os.path.join("examples", path)
    if os.path.isdir(path):
        path = os.path.join(path, "index.html")
    # the path we return must have examples omitted
    return re.sub('^examples(?:[\\/])', '', path)

# determine the directory where this script resides, from this, we'll
# make lotsa assumptions
script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
interface_directory = "impl/packages/chromeless/data"
ui_directory = os.path.join(script_dir, "examples")

# now because this is a demo, and lloyd is an idiot, we'll just
# symlink user interface files from ui into the bowels of packages
# where the app-kit main file lives
if os.path.lexists(interface_directory):
    if not os.path.islink(interface_directory):
        raise interface_directory + " exists and is not a symlink.  please remove that bugger"
else:
    os.symlink(ui_directory, interface_directory)

# be flexible in handling the first argument
browserToLaunch = "first_browser/index.html"
try:
    browserToLaunch = sys.argv[1]
except:
    pass
browserToLaunch = findBrowserHTML(browserToLaunch)

print("Will open the browser html = " + browserToLaunch)
print("You can also try other scripts such as ./run examples/thumbnails/index.html")


import cuddlefish

cuddlefish.run([
        "run",
        "-a", "xulrunner",
        "-t", "./template/app-extension",
        "--static-args", '{"browser":"'+ browserToLaunch+'"}',
        "-p", "impl/packages/chromeless"
        ])
